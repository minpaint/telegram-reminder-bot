import logging
import smtplib
import time
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import formataddr, make_msgid

from config.settings import SMTP_SERVER, SMTP_PORT, SMTP_USER, SMTP_PASSWORD, SENDER_EMAIL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class EmailNotifier:
    def __init__(self):
        self.smtp_server = SMTP_SERVER
        self.smtp_port = SMTP_PORT
        self.smtp_user = SMTP_USER
        self.smtp_password = SMTP_PASSWORD
        self.sender_email = SENDER_EMAIL

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not all([self.smtp_user, self.smtp_password, self.sender_email]):
            missing_settings = []
            if not self.smtp_user:
                missing_settings.append('SMTP_USER')
            if not self.smtp_password:
                missing_settings.append('SMTP_PASSWORD')
            if not self.sender_email:
                missing_settings.append('SENDER_EMAIL')
            error_msg = f"Missing email settings: {', '.join(missing_settings)}"
            logger.error(error_msg)
            raise ValueError(error_msg)

        logger.info(f"EmailNotifier initialized with server {self.smtp_server}:{self.smtp_port}")

    def format_text_message(self, event, custom_message=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if custom_message:
            return custom_message

        days_left = (event.event_date.date() - datetime.now().date()).days

        message = (
            f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏\n\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {event.event_name}\n"
            f"üìÜ –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –î–æ —Å–æ–±—ã—Ç–∏—è: {days_left} –¥–Ω–µ–π\n"
        )

        if hasattr(event, 'file_name') and event.file_name:
            message += f"üìÅ –§–∞–π–ª: {event.file_name}\n"

        if hasattr(event, 'responsible_telegram_ids') and event.responsible_telegram_ids:
            message += f"üë• –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ: {event.responsible_telegram_ids}\n"

        if hasattr(event, 'periodicity') and event.periodicity:
            message += f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {event.periodicity} –º–µ—Å.\n"

        message += "\n---\n–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π 'unsubscribe'"

        return message

    def format_html_message(self, event, custom_message=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if custom_message:
            return f"<p>{custom_message}</p>"

        days_left = (event.event_date.date() - datetime.now().date()).days

        html = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .container {{ padding: 20px; max-width: 600px; margin: 0 auto; }}
                .header {{ color: #2c3e50; margin-bottom: 20px; }}
                .details {{ margin: 15px 0; background-color: #f9f9f9; padding: 15px; border-radius: 5px; }}
                .details p {{ margin: 8px 0; }}
                .footer {{ color: #7f8c8d; font-size: 0.9em; margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee; }}
                .emoji {{ font-size: 1.2em; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h2 class="header"><span class="emoji">üìÖ</span> –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏</h2>
                <div class="details">
                    <p><strong>üìå –ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {event.event_name}</p>
                    <p><strong>üìÜ –î–∞—Ç–∞:</strong> {event.event_date.strftime('%d.%m.%Y')}</p>
                    <p><strong>‚è∞ –î–æ —Å–æ–±—ã—Ç–∏—è:</strong> {days_left} –¥–Ω–µ–π</p>
                    {f'<p><strong>üìÅ –§–∞–π–ª:</strong> {event.file_name}</p>' if hasattr(event, 'file_name') and event.file_name else ''}
                    {f'<p><strong>üë• –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ:</strong> {event.responsible_telegram_ids}</p>' if hasattr(event, 'responsible_telegram_ids') and event.responsible_telegram_ids else ''}
                    {f'<p><strong>üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</strong> {event.periodicity} –º–µ—Å.</p>' if hasattr(event, 'periodicity') and event.periodicity else ''}
                </div>
                <div class="footer">
                    <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ë–æ—Ç–∞-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—è</p>
                    <p>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "unsubscribe"</p>
                </div>
            </div>
        </body>
        </html>
        """
        return html

    def send_notification(self, db, event, subject=None, message=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not event.responsible_email:
            logger.warning(f"Email –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.event_id}")
            return False

        try:
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ email –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.event_id} –Ω–∞ –∞–¥—Ä–µ—Å {event.responsible_email}")

            msg = MIMEMultipart('alternative')
            msg['From'] = formataddr(("–ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å", self.sender_email))
            msg['To'] = event.responsible_email
            msg['Subject'] = subject or f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event.event_name}"
            msg['Message-ID'] = make_msgid(domain='yandex.ru')
            msg['List-Unsubscribe'] = f'<mailto:{self.sender_email}?subject=unsubscribe>'

            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏ HTML –≤–µ—Ä—Å–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            text_part = MIMEText(self.format_text_message(event, message), 'plain', 'utf-8')
            html_part = MIMEText(self.format_html_message(event, message), 'html', 'utf-8')

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg.attach(text_part)
            msg.attach(html_part)

            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É {self.smtp_server}:{self.smtp_port}")
            with smtplib.SMTP_SSL(self.smtp_server, self.smtp_port) as server:
                server.login(self.smtp_user, self.smtp_password)
                logger.debug("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ SMTP —Å–µ—Ä–≤–µ—Ä–µ")

                server.send_message(msg)
                logger.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {event.responsible_email}")
                return True

        except smtplib.SMTPException as smtp_error:
            logger.error(f"SMTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(smtp_error)}", exc_info=True)
            raise
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}", exc_info=True)
            raise

    def send_multiple_notifications(self, events):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        for event in events:
            try:
                self.send_notification(None, event)
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                time.sleep(2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.event_id}: {str(e)}")
                continue

    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.smtp_server}:{self.smtp_port}")
            with smtplib.SMTP_SSL(self.smtp_server, self.smtp_port) as server:
                server.login(self.smtp_user, self.smtp_password)
                logger.info("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", exc_info=True)
            return False
