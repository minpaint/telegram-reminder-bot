import logging
import os

from dotenv import load_dotenv
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler

from handlers import (
    start_command,
    show_events,
    reminders_command,
    delete_event_request,
    update_event_request,
    handle_add_file,
    handle_delete_callback,
    handle_update_callback,
    handle_document,
    handle_new_date,
    manual_notification_request,
    handle_manual_notification_callback
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def setup_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

    # –ö–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler("start", start_command))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    dp.add_handler(MessageHandler(
        Filters.document.file_extension('xlsx'),
        handle_document
    ))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    dp.add_handler(MessageHandler(
        Filters.regex('^üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è$'),
        show_events
    ))

    dp.add_handler(MessageHandler(
        Filters.regex('^üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$'),
        reminders_command
    ))

    dp.add_handler(MessageHandler(
        Filters.regex('^üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ$'),
        delete_event_request
    ))

    dp.add_handler(MessageHandler(
        Filters.regex('^‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ$'),
        update_event_request
    ))

    dp.add_handler(MessageHandler(
        Filters.regex('^üìÇ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª$'),
        handle_add_file
    ))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    dp.add_handler(MessageHandler(
        Filters.regex('^üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$'),
        manual_notification_request
    ))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.add_handler(CallbackQueryHandler(
        handle_delete_callback,
        pattern='^delete_'
    ))

    dp.add_handler(CallbackQueryHandler(
        handle_update_callback,
        pattern='^update_'
    ))

    dp.add_handler(CallbackQueryHandler(
        handle_manual_notification_callback,
        pattern='^manual_send_'
    ))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command,
        handle_new_date
    ))


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = os.getenv("TOKEN")
    if not TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    try:
        # –°–æ–∑–¥–∞—ë–º updater
        updater = Updater(TOKEN, use_context=True)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp = updater.dispatcher

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(dp)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        updater.start_polling()
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = updater.bot.get_me()
        logger.info(f"–ò–º—è –±–æ—Ç–∞: @{bot_info.username}")
        logger.info(f"ID –±–æ—Ç–∞: {bot_info.id}")

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        updater.idle()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)


from services.notifications.email import EmailNotifier

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫
try:
    email_notifier = EmailNotifier()
    if email_notifier.test_connection():
        logger.info("‚úÖ Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ email: {str(e)}")

if __name__ == '__main__':
    main()