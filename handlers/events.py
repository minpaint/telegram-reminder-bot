import logging
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from core.database import SessionLocal
from models import Event

logger = logging.getLogger(__name__)

def delete_event_request(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.effective_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    db = SessionLocal()
    try:
        events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True
        ).all()

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")

        if not events:
            update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        events_by_file = {}
        for event in events:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∫ datetime —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if isinstance(event.event_date, str):
                try:
                    event.event_date = datetime.strptime(event.event_date, "%Y-%m-%d").replace(hour=0, minute=0,
                                                                                               second=0)
                except ValueError:
                    try:
                        event.event_date = datetime.strptime(event.event_date, "%Y-%m-%d %H:%M:%S")
                    except ValueError:
                        try:
                            event.event_date = datetime.strptime(event.event_date, "%d.%m.%Y")
                        except ValueError as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É {event.event_date}, –æ—à–∏–±–∫–∞ {e}")
                            continue

            try:
                file_name = event.file_name or "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"
                if file_name not in events_by_file:
                    events_by_file[file_name] = []
                events_by_file[file_name].append(event)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {event.event_id}: {e}")

        keyboard = []

        try:
            if "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è" in events_by_file:
                keyboard.append([InlineKeyboardButton("üìù –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="header_other")])
                for event in sorted(events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"], key=lambda x: x.event_date):
                    button_text = f"{event.event_name}: {event.event_date.strftime('%d.%m.%Y')}"
                    callback_data = f"delete_{event.event_id}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
                del events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"]

            for file_name, file_events in sorted(events_by_file.items()):
                keyboard.append([InlineKeyboardButton(f"üìÅ {file_name}", callback_data=f"header_{file_name}")])
                for event in sorted(file_events, key=lambda x: x.event_date):
                    button_text = f"{event.event_name}: {event.event_date.strftime('%d.%m.%Y')}"
                    callback_data = f"delete_{event.event_id}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}", exc_info=True)
            raise

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    finally:
        db.close()

def handle_delete_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback —É–¥–∞–ª–µ–Ω–∏—è: {query.data}")
    query.answer()

    if query.data.startswith("header"):
        return

    event_id = int(query.data.split('_')[1])
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id}")

    db = SessionLocal()
    try:
        event = db.query(Event).filter(
            Event.event_id == event_id,
            Event.creator_id == query.from_user.id
        ).first()

        if event:
            event.is_active = False
            db.commit()
            logger.info(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
            query.edit_message_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    finally:
        db.close()

def update_event_request(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.effective_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    db = SessionLocal()
    try:
        events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True
        ).order_by(Event.file_name, Event.event_date).all()

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")

        if not events:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return

        events_by_file = {}
        for event in events:
            try:
                file_name = event.file_name or "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"
                if file_name not in events_by_file:
                    events_by_file[file_name] = []
                events_by_file[file_name].append(event)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {event.event_id}: {e}")

        keyboard = []

        try:
            if "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è" in events_by_file:
                keyboard.append([InlineKeyboardButton("üìù –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="header_other")])
                for event in sorted(events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"], key=lambda x: x.event_date):
                    button_text = f"{event.event_name}: {event.event_date.strftime('%d.%m.%Y')}"
                    callback_data = f"update_{event.event_id}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
                del events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"]

            for file_name, file_events in sorted(events_by_file.items()):
                keyboard.append([InlineKeyboardButton(f"üìÅ {file_name}", callback_data=f"header_{file_name}")])
                for event in sorted(file_events, key=lambda x: x.event_date):
                    button_text = f"{event.event_name}: {event.event_date.strftime('%d.%m.%Y')}"
                    callback_data = f"update_{event.event_id}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}", exc_info=True)
            raise

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    finally:
        db.close()

def handle_update_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {query.data}")
    query.answer()

    if query.data.startswith("header"):
        return

    try:
        event_id = int(query.data.split('_')[1])
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context.user_data['updating_event'] = event_id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        db = SessionLocal()
        try:
            event = db.query(Event).filter(
                Event.event_id == event_id,
                Event.creator_id == query.from_user.id
            ).first()

            if event:
                message = (
                    f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.event_name}\n"
                    f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n\n"
                    f"üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
                )
                query.edit_message_text(text=message)
            else:
                query.edit_message_text(text="‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
            query.edit_message_text(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
        query.edit_message_text(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

def handle_new_date(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
    if 'updating_event' not in context.user_data:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã

    try:
        new_date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y")
        event_id = context.user_data['updating_event']
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è {event_id} –Ω–∞ {new_date}")

        db = SessionLocal()
        try:
            event = db.query(Event).filter(
                Event.event_id == event_id,
                Event.creator_id == update.effective_user.id
            ).first()

            if event:
                old_date = event.event_date
                event.event_date = new_date
                try:
                    db.commit()
                    logger.info(f"–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è {event_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

                    message = (
                        f"‚úÖ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è '{event.event_name}' –∏–∑–º–µ–Ω–µ–Ω–∞!\n"
                        f"–°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: {old_date.strftime('%d.%m.%Y')}\n"
                        f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {new_date.strftime('%d.%m.%Y')}"
                    )
                    update.message.reply_text(message)
                except Exception as commit_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {commit_error}", exc_info=True)
                    db.rollback()
                    update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            else:
                logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        finally:
            db.close()

    except ValueError:
        logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã")
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì"
        )
    finally:
        if 'updating_event' in context.user_data:
            del context.user_data['updating_event']
