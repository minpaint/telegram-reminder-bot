import logging
from datetime import datetime
from datetime import timedelta

from telegram import Update
from telegram.ext import CallbackContext

from core.database import SessionLocal
from models import Event
from .base import get_base_keyboard

logger = logging.getLogger(__name__)


def format_event_message(event, detailed=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    default_time = datetime.min.time()
    event_time = event.event_date.time() if isinstance(event.event_date, datetime) else default_time
    base_message = (
        f"üìÖ –°–æ–±—ã—Ç–∏–µ: {event.event_name}\n"
        f"üóì –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {event_time.strftime('%H:%M')}\n"
        f"üîÅ –ü–æ–≤—Ç–æ—Ä: {event.repeat_type or '–ù–µ—Ç'}\n"
        f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{event.responsible_telegram_ids.split(',')[0] if event.responsible_telegram_ids else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )

    if detailed:
        extra_info = []
        if event.responsible_email:
            extra_info.append(f"üìß Email: {event.responsible_email}")
        if event.repeat_type == "–ï–∂–µ–º–µ—Å—è—á–Ω–æ":
            extra_info.append(f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {event.periodicity} –º–µ—Å.")
        if event.remind_before:
            extra_info.append(f"‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ {event.remind_before} –¥–Ω–µ–π")

        if extra_info:
            base_message += "\n" + "\n".join(extra_info)

    return base_message

def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db = SessionLocal()
    try:
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏:"
        )
        keyboard = get_base_keyboard(user.id)
        update.message.reply_text(message, reply_markup=keyboard)
    finally:
        db.close()


def reminders_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    current_date = datetime.now().date()
    one_month_ahead = current_date + timedelta(days=30)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü
    db = SessionLocal()
    try:
        overdue_events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True,
            Event.event_date < current_date
        ).order_by(Event.event_date).all()

        today_events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True,
            Event.event_date == current_date
        ).order_by(Event.event_date).all()

        upcoming_events = []
        all_future_events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True,
            Event.event_date > current_date,
            Event.event_date <= one_month_ahead
        ).order_by(Event.event_date).all()

        for event in all_future_events:
            remind_date = event.event_date - timedelta(days=event.remind_before)
            if current_date >= remind_date.date():
                upcoming_events.append(event)

        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ - {len(overdue_events)}, —Å–µ–≥–æ–¥–Ω—è - {len(today_events)}, –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö - {len(upcoming_events)}")

        if not any([overdue_events, today_events, upcoming_events]):
            update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return

        message_parts = []

        if overdue_events:
            message_parts.append("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n")
            grouped_overdue = {}
            for event in overdue_events:
                grouped_overdue.setdefault(event.file_name, []).append(event)

            for file_name, events in grouped_overdue.items():
                message_parts.append(f"üìÅ {file_name}\n")
                message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
                for event in events:
                    event_date = event.event_date.strftime('%d.%m.%Y')
                    message_parts.append(f"üìÖ {event.event_name}: {event_date}\n")

        if today_events:
            message_parts.append("üìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n")
            grouped_today = {}
            for event in today_events:
                grouped_today.setdefault(event.file_name, []).append(event)

            for file_name, events in grouped_today.items():
                message_parts.append(f"üìÅ {file_name}\n")
                message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
                for event in events:
                    event_date = event.event_date.strftime('%d.%m.%Y')
                    message_parts.append(f"üìÖ {event.event_name}: {event_date}\n")

        if upcoming_events:
            message_parts.append("üîî –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è:\n")
            grouped_upcoming = {}
            for event in upcoming_events:
                grouped_upcoming.setdefault(event.file_name, []).append(event)

            for file_name, events in grouped_upcoming.items():
                message_parts.append(f"üìÅ {file_name}\n")
                message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
                for event in events:
                    event_date = event.event_date.strftime('%d.%m.%Y')
                    message_parts.append(f"üìÖ {event.event_name}: {event_date}\n")
                    message_parts.append(f"–î–æ —Å–æ–±—ã—Ç–∏—è: {(event.event_date.date() - current_date).days} –¥–Ω–µ–π\n")

        final_message = "".join(message_parts)
        if len(final_message) > 4096:
            for i in range(0, len(final_message), 4096):
                update.message.reply_text(final_message[i:i + 4096], parse_mode='HTML')
        else:
            update.message.reply_text(final_message, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    finally:
        db.close()


def show_events(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ñ–∞–π–ª–∞–º"""
    user_id = update.effective_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    db = SessionLocal()
    try:
        events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True
        ).order_by(Event.file_name, Event.event_date).all()

        if not events:
            update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π."
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ñ–∞–π–ª–∞–º
        events_by_file = {}
        for event in events:
            file_name = event.file_name or "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"
            if file_name not in events_by_file:
                events_by_file[file_name] = []
            events_by_file[file_name].append(event)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = []

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        for file_name, file_events in sorted(events_by_file.items()):
            message_parts.append(f"\nüìÅ {file_name}\n")
            message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n")

            for event in sorted(file_events, key=lambda x: x.event_date):
                days_left = (event.event_date.date() - datetime.now().date()).days

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
                if days_left < 0:
                    status = "‚ö†Ô∏è"  # –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                elif days_left <= 3:
                    status = "‚ùóÔ∏è"  # —Å—Ä–æ—á–Ω–æ
                else:
                    status = "üìå"  # –æ–±—ã—á–Ω–æ–µ

                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
                message_parts.append(
                    f"{status} {event.event_name}\n"
                    f"üìÖ {event.event_date.strftime('%d.%m.%Y')}"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å–µ–≥–æ–¥–Ω—è
                if days_left != 0:
                    if days_left < 0:
                        message_parts.append(f" (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_left)} –¥–Ω.)")
                    else:
                        message_parts.append(f" (—á–µ—Ä–µ–∑ {days_left} –¥–Ω.)")

                message_parts.append("\n")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–±–µ–∑ email)
                if event.responsible_telegram_ids and event.responsible_telegram_ids != "@–Ω–µ —É–∫–∞–∑–∞–Ω":
                    message_parts.append(f"üë§ {event.responsible_telegram_ids}\n")
                if event.repeat_type and event.repeat_type.lower() != "–Ω–µ—Ç":
                    message_parts.append(f"üîÑ {event.repeat_type}")
                    if event.periodicity:
                        message_parts.append(f" ({event.periodicity} –º–µ—Å.)")
                    message_parts.append("\n")

                message_parts.append("\n")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_events = len(events)
        urgent_events = sum(1 for e in events if 0 <= (e.event_date.date() - datetime.now().date()).days <= 3)
        overdue_events = sum(1 for e in events if (e.event_date.date() - datetime.now().date()).days < 0)

        if total_events > 0:
            stats = (
                f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üìå –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}\n"
            )
            if urgent_events > 0:
                stats += f"‚ùóÔ∏è –°—Ä–æ—á–Ω—ã—Ö (‚â§3 –¥–Ω—è): {urgent_events}\n"
            if overdue_events > 0:
                stats += f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {overdue_events}\n"
            message_parts.append(stats)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        final_message = "".join(message_parts)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(final_message) > 4096:
            for i in range(0, len(final_message), 4096):
                update.message.reply_text(
                    final_message[i:i + 4096],
                    parse_mode='HTML'
                )
        else:
            update.message.reply_text(final_message, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    finally:
        db.close()

def handle_add_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª'"""
    update.message.reply_text(
        "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx) —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π.\n\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
        "- –°–æ–±—ã—Ç–∏–µ\n"
        "- –î–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "- –í—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è (–ß–ß:–ú–ú)\n"
        "- –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å\n"
        "- –ü–æ–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è (–ù–µ—Ç/–ï–∂–µ–º–µ—Å—è—á–Ω–æ)\n"
        "- –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–º–µ—Å)\n"
        "- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (@username)\n"
        "- Email –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
    )