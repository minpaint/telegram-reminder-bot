import logging
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import CallbackContext

from core.database import SessionLocal
from models import Event
from .base import get_base_keyboard, format_event_message
from .events import delete_event_request, update_event_request

logger = logging.getLogger(__name__)


def handle_menu_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é"""
    text = update.message.text

    if text == "üìÇ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª":
        handle_add_file(update, context)
    elif text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        reminders_command(update, context)
    elif text == "üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è":
        show_events(update, context)
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        update_event_request(update, context)
    elif text == "üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        delete_event_request(update, context)
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        restart_command(update, context)


def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db = SessionLocal()
    try:
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏:"
        )
        keyboard = get_base_keyboard(user.id)
        update.message.reply_text(message, reply_markup=keyboard)
    finally:
        db.close()


def reminders_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    now = datetime.now()
    today_start = datetime(now.year, now.month, now.day)
    today_end = today_start + timedelta(days=1)

    db = SessionLocal()
    try:
        events_today = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.next_reminder >= today_start,
            Event.next_reminder < today_end,
            Event.is_active == True
        ).all()

        message = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"

        if not events_today:
            message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        else:
            for event in events_today:
                message += format_event_message(event) + "\n\n"

        update.message.reply_text(message)
    finally:
        db.close()


def show_events(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ñ–∞–π–ª–∞–º"""
    user_id = update.effective_user.id
    db = SessionLocal()
    try:
        events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True
        ).order_by(Event.file_name, Event.event_date).all()

        if not events:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return

        events_by_file = {}
        for event in events:
            file_name = event.file_name or "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"
            if file_name not in events_by_file:
                events_by_file[file_name] = []
            events_by_file[file_name].append(event)

        message_parts = ["üìã –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n"]

        if "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è" in events_by_file:
            message_parts.append("üìù –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è\n")
            message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
            for event in sorted(events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"],
                                key=lambda x: x.event_date):
                message_parts.append(format_event_message(event) + "\n\n")
            message_parts.append("\n")
            del events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"]

        for file_name, file_events in sorted(events_by_file.items()):
            message_parts.append(f"üìÅ {file_name}\n")
            message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

            for event in sorted(file_events, key=lambda x: x.event_date):
                message_parts.append(format_event_message(event) + "\n\n")

            message_parts.append("\n")

        final_message = "".join(message_parts)

        if len(final_message) > 4096:
            for i in range(0, len(final_message), 4096):
                update.message.reply_text(final_message[i:i + 4096])
        else:
            update.message.reply_text(final_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    finally:
        db.close()


def restart_command(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    message = "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
    keyboard = get_base_keyboard(user_id)
    update.message.reply_text(message, reply_markup=keyboard)


def handle_add_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª'"""
    update.message.reply_text(
        "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx) —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π.\n\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
        "- –°–æ–±—ã—Ç–∏–µ\n"
        "- –î–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "- –í—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è (–ß–ß:–ú–ú)\n"
        "- –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å\n"
        "- –ü–æ–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è (–ù–µ—Ç/–ï–∂–µ–º–µ—Å—è—á–Ω–æ)\n"
        "- –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–º–µ—Å)\n"
        "- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (@username)\n"
        "- Email –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
    )