import logging
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import CallbackContext

from core.database import SessionLocal
from models import Event
from .base import get_base_keyboard, format_event_message

logger = logging.getLogger(__name__)


def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db = SessionLocal()
    try:
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏:"
        )
        keyboard = get_base_keyboard(user.id)
        update.message.reply_text(message, reply_markup=keyboard)
    finally:
        db.close()


def reminders_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    current_date = datetime.now().date()
    one_month_ahead = current_date + timedelta(days=30)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü
    db = SessionLocal()
    try:
        overdue_events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True,
            Event.event_date < current_date
        ).order_by(Event.event_date).all()

        today_events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True,
            Event.event_date == current_date
        ).order_by(Event.event_date).all()

        upcoming_events = []
        all_future_events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True,
            Event.event_date > current_date,
            Event.event_date <= one_month_ahead
        ).order_by(Event.event_date).all()

        for event in all_future_events:
            remind_date = event.event_date - timedelta(days=event.remind_before)
            if current_date >= remind_date.date():
                upcoming_events.append(event)

        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ - {len(overdue_events)}, —Å–µ–≥–æ–¥–Ω—è - {len(today_events)}, –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö - {len(upcoming_events)}")

        if not any([overdue_events, today_events, upcoming_events]):
            update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return

        message_parts = []

        if overdue_events:
            message_parts.append("<b>‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n")
            grouped_overdue = {}
            for event in overdue_events:
                grouped_overdue.setdefault(event.file_name, []).append(event)

            for file_name, events in grouped_overdue.items():
                message_parts.append(f"üìÅ {file_name}\n")
                message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
                for event in events:
                    event_date = event.event_date.strftime('%d.%m.%Y')
                    message_parts.append(f"üìÖ {event.event_name}: {event_date}\n")

        if today_events:
            message_parts.append("<b>üìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n")
            grouped_today = {}
            for event in today_events:
                grouped_today.setdefault(event.file_name, []).append(event)

            for file_name, events in grouped_today.items():
                message_parts.append(f"üìÅ {file_name}\n")
                message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
                for event in events:
                    event_date = event.event_date.strftime('%d.%m.%Y')
                    message_parts.append(f"üìÖ {event.event_name}: {event_date}\n")

        if upcoming_events:
            message_parts.append("<b>üîî –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è:</b>\n")
            grouped_upcoming = {}
            for event in upcoming_events:
                grouped_upcoming.setdefault(event.file_name, []).append(event)

            for file_name, events in grouped_upcoming.items():
                message_parts.append(f"üìÅ {file_name}\n")
                message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
                for event in events:
                    event_date = event.event_date.strftime('%d.%m.%Y')
                    days_left = (event.event_date.date() - current_date).days
                    message_parts.append(f"üìÖ {event.event_name}: {event_date}\n")
                    message_parts.append(f"–î–æ —Å–æ–±—ã—Ç–∏—è: {days_left} –¥–Ω–µ–π\n")

        final_message = "".join(message_parts)
        if len(final_message) > 4096:
            for i in range(0, len(final_message), 4096):
                update.message.reply_text(final_message[i:i + 4096], parse_mode='HTML')
        else:
            update.message.reply_text(final_message, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    finally:
        db.close()


def show_events(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ñ–∞–π–ª–∞–º"""
    user_id = update.effective_user.id
    db = SessionLocal()
    try:
        events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True
        ).all()

        if not events:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return

        events_by_file = {}
        for event in events:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∫ datetime —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if isinstance(event.event_date, str):
                try:
                    event.event_date = datetime.strptime(event.event_date, "%Y-%m-%d").replace(hour=0, minute=0,
                                                                                               second=0)
                except ValueError:
                    try:
                        event.event_date = datetime.strptime(event.event_date, "%Y-%m-%d %H:%M:%S")
                    except ValueError:
                        try:
                            event.event_date = datetime.strptime(event.event_date, "%d.%m.%Y")
                        except ValueError as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É {event.event_date}, –æ—à–∏–±–∫–∞ {e}")
                            continue
            file_name = event.file_name or "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"
            if file_name not in events_by_file:
                events_by_file[file_name] = []
            events_by_file[file_name].append(event)

        message_parts = ["üìã –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n"]

        if "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è" in events_by_file:
            message_parts.append("üìù –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è\n")
            message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
            for event in sorted(events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"],
                                key=lambda x: x.event_date):
                message_parts.append(format_event_message(event) + "\n\n")
            message_parts.append("\n")
            del events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"]

        for file_name, file_events in sorted(events_by_file.items()):
            message_parts.append(f"üìÅ {file_name}\n")
            message_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

            for event in sorted(file_events, key=lambda x: x.event_date):
                message_parts.append(format_event_message(event) + "\n\n")

            message_parts.append("\n")

        final_message = "".join(message_parts)

        if len(final_message) > 4096:
            for i in range(0, len(final_message), 4096):
                update.message.reply_text(final_message[i:i + 4096])
        else:
            update.message.reply_text(final_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    finally:
        db.close()

def handle_add_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª'"""
    update.message.reply_text(
        "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx) —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π.\n\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
        "- –°–æ–±—ã—Ç–∏–µ\n"
        "- –î–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "- –í—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è (–ß–ß:–ú–ú)\n"
        "- –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å\n"
        "- –ü–æ–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è (–ù–µ—Ç/–ï–∂–µ–º–µ—Å—è—á–Ω–æ)\n"
        "- –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–º–µ—Å)\n"
        "- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (@username)\n"
        "- Email –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
    )