import logging
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from core.database import SessionLocal
from models import Event, Notification, NotificationStatus, NotificationType
from services.notifications.email import EmailNotifier

logger = logging.getLogger(__name__)


def manual_notification_request(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    db = SessionLocal()
    try:
        events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True
        ).order_by(Event.file_name, Event.event_date).all()

        if not events:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        events_by_file = {}
        for event in events:
            file_name = event.file_name or "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"
            if file_name not in events_by_file:
                events_by_file[file_name] = []
            events_by_file[file_name].append(event)

        keyboard = []
        if "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è" in events_by_file:
            keyboard.append([InlineKeyboardButton("üìù –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="header_other")])
            for event in sorted(events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"], key=lambda x: x.event_date):
                button_text = f"{event.event_name} ({event.event_date.strftime('%d.%m.%Y')})"
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì¢ {button_text}",
                        callback_data=f"manual_send_{event.event_id}"
                    )
                ])
            del events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"]

        for file_name, file_events in sorted(events_by_file.items()):
            keyboard.append([InlineKeyboardButton(f"üìÅ {file_name}", callback_data=f"header_{file_name}")])
            for event in sorted(file_events, key=lambda x: x.event_date):
                button_text = f"{event.event_name} ({event.event_date.strftime('%d.%m.%Y')})"
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì¢ {button_text}",
                        callback_data=f"manual_send_{event.event_id}"
                    )
                ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
            "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    finally:
        db.close()


def handle_manual_notification_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")

    query.answer()

    if query.data.startswith("header_"):
        logger.info("–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return

    try:
        event_id = int(query.data.split('_')[-1])
        user_id = query.from_user.id
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {event_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        db = SessionLocal()
        try:
            event = db.query(Event).filter(
                Event.event_id == event_id,
                Event.creator_id == user_id,
                Event.is_active == True
            ).first()

            if not event:
                logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
                return

            logger.info(f"–°–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {event.event_name}")
            logger.info(f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ: {event.responsible_telegram_ids}")

            try:
                test_message = "üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"
                context.bot.send_message(
                    chat_id=user_id,
                    text=test_message
                )
                logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

            days_left = (event.event_date.date() - datetime.now().date()).days
            message = (
                f"üîî <b>–†—É—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏</b>\n\n"
                f"üìå –°–æ–±—ã—Ç–∏–µ: {event.event_name}\n"
                f"üìÖ –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
                f"‚è∞ –î–æ —Å–æ–±—ã—Ç–∏—è: {days_left} –¥–Ω–µ–π\n"
                f"üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%H:%M:%S')}\n"
                f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_id}\n"
            )

            if event.responsible_telegram_ids:
                message += f"üìã –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ: {event.responsible_telegram_ids}\n"
            if event.responsible_email:
                message += f"üìß Email: {event.responsible_email}\n"

            success_telegram = False
            success_email = False

            if event.responsible_telegram_ids:
                telegram_ids = event.responsible_telegram_ids.split(',')
                logger.info(f"–°–ø–∏—Å–æ–∫ ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {telegram_ids}")

                for telegram_id in telegram_ids:
                    telegram_id = telegram_id.strip()
                    try:
                        if not telegram_id:
                            logger.warning("–ü—É—Å—Ç–æ–π telegram_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue

                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                        context.bot.send_message(
                            chat_id=telegram_id,
                            text=message,
                            parse_mode='HTML'
                        )
                        success_telegram = True
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram {telegram_id}: {str(e)}")

            if event.responsible_email:
                try:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ email: {event.responsible_email}")
                    email_notifier = EmailNotifier()
                    email_message = (
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏\n\n"
                        f"–°–æ–±—ã—Ç–∏–µ: {event.event_name}\n"
                        f"–î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
                        f"–î–æ —Å–æ–±—ã—Ç–∏—è: {days_left} –¥–Ω–µ–π\n"
                    )
                    if event.responsible_telegram_ids:
                        email_message += f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ: {event.responsible_telegram_ids}\n"

                    email_notifier.send_notification(
                        db=db,
                        event=event,
                        subject=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event.event_name}",
                        message=email_message
                    )
                    success_email = True
                    logger.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {event.responsible_email}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}", exc_info=True)

            if event.responsible_telegram_ids:
                notification_telegram = Notification(
                    event_id=event.event_id,
                    user_id=user_id,
                    type=NotificationType.TELEGRAM,
                    status=NotificationStatus.SENT if success_telegram else NotificationStatus.FAILED,
                    scheduled_at=datetime.now(),
                    sent_at=datetime.now() if success_telegram else None
                )
                db.add(notification_telegram)

            if event.responsible_email:
                notification_email = Notification(
                    event_id=event.event_id,
                    user_id=user_id,
                    type=NotificationType.EMAIL,
                    status=NotificationStatus.SENT if success_email else NotificationStatus.FAILED,
                    scheduled_at=datetime.now(),
                    sent_at=datetime.now() if success_email else None
                )
                db.add(notification_email)

            db.commit()

            status_message = "üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"

            if event.responsible_telegram_ids:
                status = "‚úÖ" if success_telegram else "‚ùå"
                status_message += f"{status} Telegram\n"

            if event.responsible_email:
                status = "‚úÖ" if success_email else "‚ùå"
                status_message += f"{status} Email ({event.responsible_email})\n"

            query.edit_message_text(status_message)
            logger.info(
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. Telegram: {success_telegram}, Email: {success_email}")

        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {db_error}", exc_info=True)
            query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}", exc_info=True)
        try:
            query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except:
            pass
