import logging
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from core.database import SessionLocal
from models import Event, User, Notification, NotificationType, NotificationStatus
from services.notifications.email import EmailNotifier
from services.notifications.telegram import TelegramNotifier

logger = logging.getLogger(__name__)


def manual_notification_request(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    user_id = update.effective_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    db = SessionLocal()
    try:
        events = db.query(Event).filter(
            Event.creator_id == user_id,
            Event.is_active == True
        ).order_by(Event.file_name, Event.event_date).all()

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")

        if not events:
            update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        events_by_file = {}
        for event in events:
            try:
                file_name = event.file_name or "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"
                if file_name not in events_by_file:
                    events_by_file[file_name] = []
                events_by_file[file_name].append(event)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {event.event_id}: {e}")

        keyboard = []

        try:
            if "–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è" in events_by_file:
                keyboard.append([InlineKeyboardButton("üìù –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="header_other")])
                for event in sorted(events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"], key=lambda x: x.event_date):
                    button_text = f"{event.event_name}: {event.event_date.strftime('%d.%m.%Y')}"
                    callback_data = f"manual_send_{event.event_id}"
                    keyboard.append([InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {button_text}", callback_data=callback_data)])
                del events_by_file["–î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è"]

            for file_name, file_events in sorted(events_by_file.items()):
                keyboard.append([InlineKeyboardButton(f"üìÅ {file_name}", callback_data=f"header_{file_name}")])
                for event in sorted(file_events, key=lambda x: x.event_date):
                    button_text = f"{event.event_name}: {event.event_date.strftime('%d.%m.%Y')}"
                    callback_data = f"manual_send_{event.event_id}"
                    keyboard.append([InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {button_text}", callback_data=callback_data)])

            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text("üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=reply_markup)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}", exc_info=True)
            raise

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    finally:
        db.close()


def handle_manual_notification_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {query.data}")
    query.answer()

    if query.data.startswith("header"):
        return

    db = SessionLocal()
    try:
        event_id = int(query.data.split('_')[-1])
        user_id = query.from_user.id

        event = db.query(Event).filter(Event.event_id == event_id).first()
        user = db.query(User).filter(User.user_id == user_id).first()

        if not event or not user:
            query.edit_message_text(f"‚ùå –°–æ–±—ã—Ç–∏–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        logger.info(f"–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")

        telegram_notifier = TelegramNotifier()
        email_notifier = EmailNotifier()

        message = f"""
üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>

–°–æ–±—ã—Ç–∏–µ: {event.event_name}
–î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}
–î–æ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: {(event.event_date - datetime.now()).days} –¥–Ω–µ–π
"""

        try:
            telegram_notifier.send_notification(db, event)
            notification = Notification(
                user_id=user.user_id,
                event_id=event.event_id,
                type=NotificationType.TELEGRAM,
                status=NotificationStatus.SENT,
                sent_at=datetime.utcnow()
            )
            db.add(notification)
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            notification = Notification(
                user_id=user.user_id,
                event_id=event.event_id,
                type=NotificationType.TELEGRAM,
                status=NotificationStatus.FAILED,
                error_message=str(e)
            )
            db.add(notification)
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

        if user.email:
            try:
                email_notifier.send_notification(db, event)
                notification = Notification(
                    user_id=user.user_id,
                    event_id=event.event_id,
                    type=NotificationType.EMAIL,
                    status=NotificationStatus.SENT,
                    sent_at=datetime.utcnow()
                )
                db.add(notification)
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            except Exception as e:
                notification = Notification(
                    user_id=user.user_id,
                    event_id=event.event_id,
                    type=NotificationType.EMAIL,
                    status=NotificationStatus.FAILED,
                    error_message=str(e)
                )
                db.add(notification)
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email: {e}")

        db.commit()
        query.edit_message_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        logger.info(f"–†—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}.")
    finally:
        db.close()
